"""
    Oura API

    # Overview   The Oura API allows Oura users and partner applications to improve their user experience with Oura data.  This document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.  For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.  # Data Access  Individual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).  If you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.  API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.  Additionally, Oura users **must provide consent** to share each data type an API Application has access to.  All data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).  Additionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.  The Oura API V2 returns a 426 response code for users who do not have an updated version of the app installed.  # Authentication  The Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).  Access tokens must be included in the request header as follows: ```http GET /v2/usercollection/personal_info HTTP/1.1 Host: api.ouraring.com Authorization: Bearer <token> ```  # Oura HTTP Response Codes  | Response Code                        | Description | | ------------------------------------ | - | | 200 OK                               | Successful Response         | | 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. | | 426 Minimum App Version Error        | The Oura user's mobile app does not meet the minimum app version requirement to support sharing the requested data type. The Oura user must update their mobile app to enable API access for the requested data type. | | 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.|   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ouraring.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ouraring.exceptions import ApiAttributeError


def lazy_import():
    from ouraring.model.activity_contributors import ActivityContributors
    from ouraring.model.met_sample import METSample
    globals()['ActivityContributors'] = ActivityContributors
    globals()['METSample'] = METSample


class DailyActivityModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'active_calories': (int,),  # noqa: E501
            'average_met_minutes': (float,),  # noqa: E501
            'contributors': (ActivityContributors,),  # noqa: E501
            'equivalent_walking_distance': (int,),  # noqa: E501
            'high_activity_met_minutes': (int,),  # noqa: E501
            'high_activity_time': (int,),  # noqa: E501
            'inactivity_alerts': (int,),  # noqa: E501
            'low_activity_met_minutes': (int,),  # noqa: E501
            'low_activity_time': (int,),  # noqa: E501
            'medium_activity_met_minutes': (int,),  # noqa: E501
            'medium_activity_time': (int,),  # noqa: E501
            'met': (METSample,),  # noqa: E501
            'meters_to_target': (int,),  # noqa: E501
            'non_wear_time': (int,),  # noqa: E501
            'resting_time': (int,),  # noqa: E501
            'sedentary_met_minutes': (int,),  # noqa: E501
            'sedentary_time': (int,),  # noqa: E501
            'steps': (int,),  # noqa: E501
            'target_calories': (int,),  # noqa: E501
            'target_meters': (int,),  # noqa: E501
            'total_calories': (int,),  # noqa: E501
            'day': (date,),  # noqa: E501
            'timestamp': (str,),  # noqa: E501
            'class_5_min': (str,),  # noqa: E501
            'score': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'active_calories': 'active_calories',  # noqa: E501
        'average_met_minutes': 'average_met_minutes',  # noqa: E501
        'contributors': 'contributors',  # noqa: E501
        'equivalent_walking_distance': 'equivalent_walking_distance',  # noqa: E501
        'high_activity_met_minutes': 'high_activity_met_minutes',  # noqa: E501
        'high_activity_time': 'high_activity_time',  # noqa: E501
        'inactivity_alerts': 'inactivity_alerts',  # noqa: E501
        'low_activity_met_minutes': 'low_activity_met_minutes',  # noqa: E501
        'low_activity_time': 'low_activity_time',  # noqa: E501
        'medium_activity_met_minutes': 'medium_activity_met_minutes',  # noqa: E501
        'medium_activity_time': 'medium_activity_time',  # noqa: E501
        'met': 'met',  # noqa: E501
        'meters_to_target': 'meters_to_target',  # noqa: E501
        'non_wear_time': 'non_wear_time',  # noqa: E501
        'resting_time': 'resting_time',  # noqa: E501
        'sedentary_met_minutes': 'sedentary_met_minutes',  # noqa: E501
        'sedentary_time': 'sedentary_time',  # noqa: E501
        'steps': 'steps',  # noqa: E501
        'target_calories': 'target_calories',  # noqa: E501
        'target_meters': 'target_meters',  # noqa: E501
        'total_calories': 'total_calories',  # noqa: E501
        'day': 'day',  # noqa: E501
        'timestamp': 'timestamp',  # noqa: E501
        'class_5_min': 'class_5_min',  # noqa: E501
        'score': 'score',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, active_calories, average_met_minutes, contributors, equivalent_walking_distance, high_activity_met_minutes, high_activity_time, inactivity_alerts, low_activity_met_minutes, low_activity_time, medium_activity_met_minutes, medium_activity_time, met, meters_to_target, non_wear_time, resting_time, sedentary_met_minutes, sedentary_time, steps, target_calories, target_meters, total_calories, day, timestamp, *args, **kwargs):  # noqa: E501
        """DailyActivityModel - a model defined in OpenAPI

        Args:
            active_calories (int): Active calories expended (in kilocalories)
            average_met_minutes (float): Average metabolic equivalent (MET) in minutes
            contributors (ActivityContributors):
            equivalent_walking_distance (int): Equivalent walking distance (in meters) of energy expenditure
            high_activity_met_minutes (int): High activity metabolic equivalent (MET) in minutes
            high_activity_time (int): High activity metabolic equivalent (MET) in seconds
            inactivity_alerts (int): Number of inactivity alerts received
            low_activity_met_minutes (int): Low activity metabolic equivalent (MET) in minutes
            low_activity_time (int): Low activity metabolic equivalent (MET) in seconds
            medium_activity_met_minutes (int): Medium activity metabolic equivalent (MET) in minutes
            medium_activity_time (int): Medium activity metabolic equivalent (MET) in seconds
            met (METSample):
            meters_to_target (int): Remaining meters to target (from ```target_meters```)
            non_wear_time (int): The time (in seconds) in which the ring was not worn
            resting_time (int): Resting time (in seconds)
            sedentary_met_minutes (int): Sedentary metabolic equivalent (MET) in minutes
            sedentary_time (int): Sedentary metabolic equivalent (MET) in seconds
            steps (int): Total number of steps taken
            target_calories (int): Daily activity target (in kilocalories)
            target_meters (int): Daily activity target (in meters)
            total_calories (int): Total calories expended (in kilocalories) 
            day (date): The ```YYYY-MM-DD``` formatted local date indicating when the daily activity occurred
            timestamp (str): ISO 8601 formatted local timestamp indicating the start datetime of when the daily activity occurred

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            class_5_min (str): 5-minute activity classification for the activity period: * ```0``` non wear * ```1``` rest * ```2``` inactive * ```3``` low activity * ```4``` medium activity * ```5``` high activity. [optional]  # noqa: E501
            score (int): Activity score in range ```[1, 100]```. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.active_calories = active_calories
        self.average_met_minutes = average_met_minutes
        self.contributors = contributors
        self.equivalent_walking_distance = equivalent_walking_distance
        self.high_activity_met_minutes = high_activity_met_minutes
        self.high_activity_time = high_activity_time
        self.inactivity_alerts = inactivity_alerts
        self.low_activity_met_minutes = low_activity_met_minutes
        self.low_activity_time = low_activity_time
        self.medium_activity_met_minutes = medium_activity_met_minutes
        self.medium_activity_time = medium_activity_time
        self.met = met
        self.meters_to_target = meters_to_target
        self.non_wear_time = non_wear_time
        self.resting_time = resting_time
        self.sedentary_met_minutes = sedentary_met_minutes
        self.sedentary_time = sedentary_time
        self.steps = steps
        self.target_calories = target_calories
        self.target_meters = target_meters
        self.total_calories = total_calories
        self.day = day
        self.timestamp = timestamp
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, active_calories, average_met_minutes, contributors, equivalent_walking_distance, high_activity_met_minutes, high_activity_time, inactivity_alerts, low_activity_met_minutes, low_activity_time, medium_activity_met_minutes, medium_activity_time, met, meters_to_target, non_wear_time, resting_time, sedentary_met_minutes, sedentary_time, steps, target_calories, target_meters, total_calories, day, timestamp, *args, **kwargs):  # noqa: E501
        """DailyActivityModel - a model defined in OpenAPI

        Args:
            active_calories (int): Active calories expended (in kilocalories)
            average_met_minutes (float): Average metabolic equivalent (MET) in minutes
            contributors (ActivityContributors):
            equivalent_walking_distance (int): Equivalent walking distance (in meters) of energy expenditure
            high_activity_met_minutes (int): High activity metabolic equivalent (MET) in minutes
            high_activity_time (int): High activity metabolic equivalent (MET) in seconds
            inactivity_alerts (int): Number of inactivity alerts received
            low_activity_met_minutes (int): Low activity metabolic equivalent (MET) in minutes
            low_activity_time (int): Low activity metabolic equivalent (MET) in seconds
            medium_activity_met_minutes (int): Medium activity metabolic equivalent (MET) in minutes
            medium_activity_time (int): Medium activity metabolic equivalent (MET) in seconds
            met (METSample):
            meters_to_target (int): Remaining meters to target (from ```target_meters```)
            non_wear_time (int): The time (in seconds) in which the ring was not worn
            resting_time (int): Resting time (in seconds)
            sedentary_met_minutes (int): Sedentary metabolic equivalent (MET) in minutes
            sedentary_time (int): Sedentary metabolic equivalent (MET) in seconds
            steps (int): Total number of steps taken
            target_calories (int): Daily activity target (in kilocalories)
            target_meters (int): Daily activity target (in meters)
            total_calories (int): Total calories expended (in kilocalories) 
            day (date): The ```YYYY-MM-DD``` formatted local date indicating when the daily activity occurred
            timestamp (str): ISO 8601 formatted local timestamp indicating the start datetime of when the daily activity occurred

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            class_5_min (str): 5-minute activity classification for the activity period: * ```0``` non wear * ```1``` rest * ```2``` inactive * ```3``` low activity * ```4``` medium activity * ```5``` high activity. [optional]  # noqa: E501
            score (int): Activity score in range ```[1, 100]```. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.active_calories = active_calories
        self.average_met_minutes = average_met_minutes
        self.contributors = contributors
        self.equivalent_walking_distance = equivalent_walking_distance
        self.high_activity_met_minutes = high_activity_met_minutes
        self.high_activity_time = high_activity_time
        self.inactivity_alerts = inactivity_alerts
        self.low_activity_met_minutes = low_activity_met_minutes
        self.low_activity_time = low_activity_time
        self.medium_activity_met_minutes = medium_activity_met_minutes
        self.medium_activity_time = medium_activity_time
        self.met = met
        self.meters_to_target = meters_to_target
        self.non_wear_time = non_wear_time
        self.resting_time = resting_time
        self.sedentary_met_minutes = sedentary_met_minutes
        self.sedentary_time = sedentary_time
        self.steps = steps
        self.target_calories = target_calories
        self.target_meters = target_meters
        self.total_calories = total_calories
        self.day = day
        self.timestamp = timestamp
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
