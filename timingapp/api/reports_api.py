"""
    API Reference

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from timingapp.api_client import ApiClient, Endpoint as _Endpoint
from timingapp.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from timingapp.model.api_v1_report_get200_response import ApiV1ReportGet200Response


class ReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.api_v1_report_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiV1ReportGet200Response,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/api/v1/report',
                'operation_id': 'api_v1_report_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'include_app_usage',
                    'include_team_members',
                    'team_members',
                    'start_date_min',
                    'start_date_max',
                    'projects',
                    'include_child_projects',
                    'search_query',
                    'columns',
                    'project_grouping_level',
                    'include_project_data',
                    'timespan_grouping_mode',
                    'sort',
                    'authorization',
                    'content_type',
                    'accept',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'include_app_usage':
                        (str,),
                    'include_team_members':
                        (str,),
                    'team_members':
                        (str,),
                    'start_date_min':
                        (str,),
                    'start_date_max':
                        (str,),
                    'projects':
                        (str,),
                    'include_child_projects':
                        (str,),
                    'search_query':
                        (str,),
                    'columns':
                        (str,),
                    'project_grouping_level':
                        (int,),
                    'include_project_data':
                        (str,),
                    'timespan_grouping_mode':
                        (str,),
                    'sort':
                        (str,),
                    'authorization':
                        (str,),
                    'content_type':
                        (str,),
                    'accept':
                        (str,),
                },
                'attribute_map': {
                    'include_app_usage': 'include_app_usage',
                    'include_team_members': 'include_team_members',
                    'team_members': 'team_members[]',
                    'start_date_min': 'start_date_min',
                    'start_date_max': 'start_date_max',
                    'projects': 'projects[]',
                    'include_child_projects': 'include_child_projects',
                    'search_query': 'search_query',
                    'columns': 'columns[]',
                    'project_grouping_level': 'project_grouping_level',
                    'include_project_data': 'include_project_data',
                    'timespan_grouping_mode': 'timespan_grouping_mode',
                    'sort': 'sort[]',
                    'authorization': 'Authorization',
                    'content_type': 'Content-Type',
                    'accept': 'Accept',
                },
                'location_map': {
                    'include_app_usage': 'query',
                    'include_team_members': 'query',
                    'team_members': 'query',
                    'start_date_min': 'query',
                    'start_date_max': 'query',
                    'projects': 'query',
                    'include_child_projects': 'query',
                    'search_query': 'query',
                    'columns': 'query',
                    'project_grouping_level': 'query',
                    'include_project_data': 'query',
                    'timespan_grouping_mode': 'query',
                    'sort': 'query',
                    'authorization': 'header',
                    'content_type': 'header',
                    'accept': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def api_v1_report_get(
        self,
        **kwargs
    ):
        """Generate a report that can contain both time entries and app usage.  # noqa: E501

        <br>Returns a JSON array with several rows; each row includes the total duration (in seconds) belonging to the corresponding other (configurable) columns.  The `include_app_usage` and `include_team_members` parameters govern whether to include app usage (otherwise, only time entries are returned) as well as data for other team members. <br>The `start_date_min`, `start_date_max`, `projects`(also see `include_child_projects`) and `search_query` parameters allow filtering the returned data. <br>The `columns`, `project_grouping_level`, `include_project_data`, `timespan_grouping_mode`, and `sort` parameters govern the presentation of the returned data.  <aside class=\"notice\"> Fetching large amounts of app usage can put a substantial amount of load on our servers, so please be mindful before frequently requesting large amounts of data using this API. </aside>  <aside class=\"notice\"> If no date range filter is provided by setting <em>both</em> `start_date_min` <em>and</em> `start_date_max`, this query returns all time entries between midnight (UTC) 30 days ago and end of day (UTC) today. </aside>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_report_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            include_app_usage (str): Whether to include app usage in the report. If false, only time entries are returned. Default: `0`. [optional]
            include_team_members (str): If true, the response will also contain time entries that belong to other team members, provided the current user has permission to view them. Default: `0`. [optional]
            team_members (str): Restricts the query to data associated with the given user. Can be repeated to include time entries from several users.. [optional]
            start_date_min (str): Restricts the query to data whose start date is equal to or later than this parameter.. [optional]
            start_date_max (str): Restricts the query to data whose start date is equal to or earlier than this parameter.. [optional]
            projects (str): Restricts the query to data associated with the given project. Can be repeated to include time entries from several projects. If you would like to include time entries that are not assigned to any project, you can provide an empty string, i.e. `projects[]=`. [optional]
            include_child_projects (str): If true, the response will also contain time entries that belong to any child projects of the ones provided in `projects[]`. Default: `0`. [optional]
            search_query (str): Restricts the query to time entries whose title and/or notes contain all words in this parameter. The search is case-insensitive but diacritic-sensitive. Note: this parameter can not be used when app usage is included.. [optional]
            columns (str): Which columns to show. The `user` column is ignored if `include_team_members` is false. Possible values: `project`, `title`, `notes`, `timespan`, `user`. Default: `user`, `project`, `title`. `start_date` and `end_date` is shown when `timespan` column is sent.. [optional]
            project_grouping_level (int): When this argument is provided, report lines for projects below the given level will be aggregated by their parent project on the given level. For example, when `project_grouping_level` is 0, all times in sub-projects will be counted towards the corresponding project on the \"root\" (i.e. highest) level in the project tree. Can be a non-negative integer or -1. The default is -1, which indicates no grouping (i.e. all projects will be returned, regardless of how deep they are in the hierarchy). Requires `columns[]` to contain `project`.. [optional]
            include_project_data (str): If true, the properties of each line's project will be included in the response. Requires `columns[]` to contain `project`.. [optional]
            timespan_grouping_mode (str): When this argument is provided, report lines will be aggregated according to the given calendar unit. Possible values: `exact`, `day`, `week`, `month`, `year`. Default: `exact`. [optional]
            sort (str): Sort the results by the given column. Prepend column name with a dash (`-`) to sort descending. Default: `-duration`. Examples: `sort[]=-duration` -> Sort descending by duration. `sort[]=user&sort[]=-duration` -> Sort ascending by user, then descending by duration.. [optional]
            authorization (str): . [optional]
            content_type (str): . [optional]
            accept (str): . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiV1ReportGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_v1_report_get_endpoint.call_with_http_info(**kwargs)

